rollout_type: ofa


## ---- Component search_space ----
# ---- Type ofa ----
search_space_type: ofa
search_space_cfg:
  num_cell_groups: [1, 4, 4, 4, 4, 4]
  expansions: [1, 6, 6, 6, 6, 6]
  schedule_cfg:
    kernel_choice:
        type: value
        boundary: [1, 51, 101]
        value: [[7], [7, 5], [7, 5, 3]]
    width_choice:
      type: value
      boundary: [1, 151, 201]
      value: [[6], [6, 5, 4], [6, 5, 4, 3]]
    depth_choice:
      type: value
      boundary: [1, 251, 301]
      value: [[4], [4, 3], [4, 3, 2]]
# ---- End Type mnsanet_ofa ----
## ---- End Component search_space ----

## ---- Component dataset ----
# ---- Type cifar10 ----
dataset_type: cifar10
dataset_cfg:
  # Schedulable attributes: 
  cutout: null
# ---- End Type cifar10 ----
## ---- End Component dataset ----

objective_type: ofa_classification
objective_cfg:
  # Schedulable attributes:
  schedule_cfg:
    soft_loss_coeff:
      type: value
      boundary: [1, 60]
      value: [0.0, 1.0]
  soft_loss_coeff: 0.0
  latency_coeff: 1.0

final_model_type: ofa_final_model
final_model_cfg:
  backbone_type: mbv2_backbone
  genotypes: "cell_0=1, cell_1=4, cell_2=4, cell_3=4, cell_4=4, cell_5=4, cell_6=1, cell_0_block_0=(1, 3), cell_1_block_0=(6, 3), cell_1_block_1=(6, 3), cell_1_block_2=(6, 3), cell_1_block_3=(6, 3), cell_2_block_0=(6, 3), cell_2_block_1=(6, 3), cell_2_block_2=(6, 3), cell_2_block_3=(6, 3), cell_3_block_0=(6, 3), cell_3_block_1=(6, 3), cell_3_block_2=(6, 3), cell_3_block_3=(6, 3), cell_4_block_0=(6, 3), cell_4_block_1=(6, 3), cell_4_block_2=(6, 3), cell_4_block_3=(6, 3), cell_5_block_0=(6, 3), cell_5_block_1=(6, 3), cell_5_block_2=(6, 3), cell_5_block_3=(6, 3), cell_6_block_0=(6, 3)"
  layer_channels: [32, 16, 24, 32, 64, 96, 160, 320, 1280]
  strides: [1, 2, 2, 2, 1, 2]
  max_kernel_size: 3

final_trainer_type: cnn_trainer
final_trainer_cfg:
  batch_size: 32
  epochs: 30
  optimizer_scheduler:
    eta_min: 0.0001
    T_max: 30
    type: CosineAnnealingLR
  schedule_cfg: null
  weight_decay: 0.0003
  learning_rate: 0.001
  save_as_state_dict: true
